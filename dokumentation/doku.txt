Dokumentation:
===============

@TODO:
------
- Verbinung testen
- currentUserData
- ListUsers
- Filtern nach zugewiesen
- Filtern nach Projekt

Funktionale Beschreibung
------------------------

Es gibt drei Seiten (Screens) in dieser App

	Ticketübersichtsseite
		Die Ticketübersichtsseite bietet eine Liste aller (bzw. der ersten N) Tickets, sortiert nach Priorität, 
		und ggf. eingeschränkt auf einzelne Nutzer (d.h. auf das Feld assigned_to) und Projekte
		Bietet einen Button um neu zu laden (Cache zu verwerfen) und jeweils ein Auswahlfeld um die zugewiesene Person bzw. Projekt auszuwählen.
  
	Ticketdetailseite
		Die Ticketdetailseite zeigt alle Relevanten Daten eines Tickets, inklusiver seines "Journals", dh. der Kommentare.
		Am Ende des Journals gibt es ein Formular das einem ermöglicht einen eigenen Kommentar zu verfassen.

	Konfigurationsseite
		Auf der Konfigurationsseite kann und muss der Nutzer die URL der Redmine-Installation und seinen Key angeben.
		Beide Angaben sollten auf Richtigkeit geprüft werden. Über einen Button lässt sich ein Verbindungstest durchführen.
		"Zurück" führt auf die Ticketübersichtsseite.
  

Ordner in diesem Projekt
------------------------

 - shared             - gemeinsame Dateien für alle Implementationen
 - dokumentation      - Dokumentation und Beispieldaten
 - android-phonegap   - Android-App per Phonegap
 - ios-phonegap       - iOS-App per Phonegap
 - webos              - App für webOS (Palm/HP)
 -- /mojo             - Implementiert mit dem mojo-Framework (webOS 2.2)
 -- /enyo             - Implementiert mit dem enyo-Framework (webOS 3.0)
 - titanium           - Umsetzung der App mit dem Appcelerator Titanium-Framework (iOS/Android)


Vorgefertigte Funktionen
------------------------

In /shared/js gibt es JS-Dateien mit vorgefertigten Funktionen die bei der APP-Entwicklung 
verwendet werden können um Aufwands- und Codedoppelungen zu vermeiden.

Als "Intern" gekennzeichnete Funktionen sind nur für den internen Gebrauch gedacht, 
können aber auch von ausserhalb aufgerufen werden.


xhr.js  -- ein primitives AJAX-Interface
	xhr.get(url, success-callback, error-callback)
		Holt Get-Daten
		
		Rückgabe: Nichts
		Argumente für Callback: String-Rückgabe des Servers
		
	xhr.put(url, data, success-callback, error-callback)
		Setzt Daten auf dem Server
		
		Rückgabe: Nichts
		Argumente für Callback: String-Rückgabe des Servers

storage.js
	storage.getTicketData(ticketId, callback)
		Holt und cached Ticketdaten eines Tickets
		Callback wird mitunter mehrfach aufgerufen
		
		Rückgabe: Nichts
		Argumente für Callback: JSON wie in 10420.json
	
	storage.getTickets(callback)
		Holt und cached eine Liste aller Tickets
		Callback wird mitunter mehrfach aufgerufen
		
		Rückgabe: Nichts
		Argumente für Callback: JSON wie in issues.json
	
	storage.refreshTicketsInLocalStorage(callback)
		Intern
		Erneuert den Cache und LocalStorage der Ticketliste
		
		Rückgabe: Nichts
		Argumente für Callback: JSON wie in issues.json
	
	storage.refreshTicketInLocalStorage(id, callback)
		Intern
		Erneuert den Cache und LocalStorage eines Tickets
		
		Rückgabe: Nichts
		Argumente für Callback: JSON wie in 10420.json
		
	storage.saveToTicket(ticketId, data, callback)
		Intern 
		Verschiedene Daten an ein Ticket speichern
		! Funktioniert noch nicht korrekt
	
		Rückgabe: Nichts
		Argumente für Callback: Serverantwort als Text
		
	storage.saveNewComment(ticketId, note, callback)
		Einen neuen Kommentar an ein Ticket speichern
		! Funktioniert noch nicht korrekt
		
		Rückgabe: Nichts
		Argumente für Callback: Serverantwort als Text
	
	storage.reassignTicket(ticketId, toWhom, callback)
		Ticket einer anderen NutzerId zuweisen
		! Funktioniert noch nicht korrekt
		
		Rückgabe: Nichts
		Argumente für Callback: Serverantwort als Text

	storage.getUsers(callback)
		Gibt eine Liste aller Nutzer zurück, sofern er die Rechte dazu hat
		!existiert noch nicht
		
		Rückgabe: Nichts
		Argumente für Callback: JSON

	storage.getProjects(callback)
		Gibt eine Liste aller Projekte zurück die der Nutzer sehen kann
		!existiert noch nicht
		
		Rückgabe: Nichts
		Argumente für Callback: JSON

		
	storage.reset()
		Leert den Cache und LocalStorage	
		
		Rückgabe: Nichts

conf.js
	conf.isConfigured()
		Gibt bool zurück ob URL und KEY schon gespeichert wurden

		Argumente für Callback: true/false		
		
	conf.checkConf(callback)
		Prüft die Konfiguration auf Richtigkeit

		Rückgabe: true/false
	
	conf.getUrl()
		Intern
		Gibt die gespeicherte Redmine-URL zurück (z.B. http://projects.satzmedia.de/)
		
		Rückgabe: Redmine-URL

	conf.setUrl(url)
		Speichert eine neue Redmine-URL
		
		Rückgabe: Nichts

	conf.getKey()
		Intern
		Gibt den gespeicherten API-Key zurück
		
		Rückgabe: API-Key des Benutzers

	conf.setKey(key)
		Speichert einen neuen API-Key
		
		Rückgabe: Nichts
		
	conf.getCurrentUserData(callback)
		Intern
		Gibt Daten des derzeitigen Nutzers zurück
		!existiert noch nicht
		
		Rückgabe: Nichts
		Argumente für Callback: JSON wie in current.json

textile.js
	convert_textile(text)
		Wandelt einen Textile-String (wie von Redmine zurückgegeben) in einen HTML-String um.
		
		Rückgabe: HTML der Textile-Eingabe
	
urls.js
	urls.tickets(userId)
		Intern
		Gibt die zusammengesetzte URL zum Abruf der Ticketliste zurück
		
		Rückgabe: URL
	
	urls.ticket(ticketId)
		Intern
		Gibt die zusammengesetzte URL zum Abruf eines Tickets zurück
		
		Rückgabe: URL
		
	urls.saveToTicket(ticketId)
		Intern
		Gibt die zusammengesetzte URL zum Speichern von Daten an ein Ticket zurück
		
		Rückgabe: URL

